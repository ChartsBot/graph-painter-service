# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import protobuf.graphPainter_pb2 as graphPainter__pb2


class GraphPainterServiceStub(object):
    """The file handler service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GreetGP = channel.unary_unary(
                '/GraphPainterService/GreetGP',
                request_serializer=graphPainter__pb2.SayHelloGPMessage.SerializeToString,
                response_deserializer=graphPainter__pb2.SayHelloGPMessage.FromString,
                )
        self.PaintCandlestick = channel.unary_unary(
                '/GraphPainterService/PaintCandlestick',
                request_serializer=graphPainter__pb2.ChartRequest.SerializeToString,
                response_deserializer=graphPainter__pb2.ChartResponse.FromString,
                )
        self.PaintChart = channel.unary_unary(
                '/GraphPainterService/PaintChart',
                request_serializer=graphPainter__pb2.ChartRequest.SerializeToString,
                response_deserializer=graphPainter__pb2.ChartResponse.FromString,
                )


class GraphPainterServiceServicer(object):
    """The file handler service definition.
    """

    def GreetGP(self, request, context):
        """Sends a greeting
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PaintCandlestick(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PaintChart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GraphPainterServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GreetGP': grpc.unary_unary_rpc_method_handler(
                    servicer.GreetGP,
                    request_deserializer=graphPainter__pb2.SayHelloGPMessage.FromString,
                    response_serializer=graphPainter__pb2.SayHelloGPMessage.SerializeToString,
            ),
            'PaintCandlestick': grpc.unary_unary_rpc_method_handler(
                    servicer.PaintCandlestick,
                    request_deserializer=graphPainter__pb2.ChartRequest.FromString,
                    response_serializer=graphPainter__pb2.ChartResponse.SerializeToString,
            ),
            'PaintChart': grpc.unary_unary_rpc_method_handler(
                    servicer.PaintChart,
                    request_deserializer=graphPainter__pb2.ChartRequest.FromString,
                    response_serializer=graphPainter__pb2.ChartResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'GraphPainterService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GraphPainterService(object):
    """The file handler service definition.
    """

    @staticmethod
    def GreetGP(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GraphPainterService/GreetGP',
            graphPainter__pb2.SayHelloGPMessage.SerializeToString,
            graphPainter__pb2.SayHelloGPMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PaintCandlestick(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GraphPainterService/PaintCandlestick',
            graphPainter__pb2.ChartRequest.SerializeToString,
            graphPainter__pb2.ChartResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PaintChart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GraphPainterService/PaintChart',
            graphPainter__pb2.ChartRequest.SerializeToString,
            graphPainter__pb2.ChartResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
